<?php

function commerce_express_checkout_menu() {

  $items['admin/commerce/products/express-checkout-links'] = array(
      'title' => 'Generate Product Express Checkout Buttons',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_express_checkout_generate_links'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['commerce-express-checkout/%/%/%'] = array(
      'title' => 'Express Checkout',
      'page callback' => 'commerce_express_checkout_create_order',
      'page arguments' => array(1, 2, 3),
      'access arguments' => array('access checkout'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_field_formatter_info().
 */
function commerce_express_checkout_field_formatter_info() {
  return array(
    'commerce_express_checkout_express_checkout_link' => array(
      'label' => t('Express Checkout Link'),
      'description' => t('Display the Express Checkout link'),
      'field types' => array('commerce_product_reference'),
      'settings' => array(
        'custom_qty' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_express_checkout_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];

  $element = array();

  $element['custom_qty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow custom quantity?'),
    '#description' => t('If checked, express checkout button will have a quantity input box.'),
    '#default_value' => FALSE,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_express_checkout_field_formatter_settings_summary($field, $instance, $view_mode) {
  $settings = $instance['display'][$view_mode]['settings'];
  $withwithout = ($settings['custom_qty']) ? 'with' : 'without';
  $summary = t('Display an express checkout link @withwithout a quantity chooser', array('@withwithout' => $withwithout));
  return $summary;
}


/**
 * Implements hook_field_formatter_view().
 */
function commerce_express_checkout_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  $custom_qty = $display['settings']['custom_qty'];

  // Collect the list of product IDs.
  $product_ids = array();

  foreach ($items as $delta => $item) {
    $product_ids[$item['product_id']] = $item['product_id'];
  }

  // Exit now if we didn't find any product IDs.
  if (empty($product_ids)) {
    return;
  }

  // Load the referenced products.
  $products = commerce_product_load_multiple($product_ids, array('status' => 1));

  switch ($display['type']) {
    case 'commerce_express_checkout_express_checkout_link':
      foreach ($items as $delta => $item) {
        if (!empty($item['product_id'])) {
            $result[$delta] = array(
              '#markup' => _commerce_express_checkout_generate_link($item['product_id'], $custom_qty),
            );
        }
      }
      break;
  }

  // Add custom qty js, maybe
  if ($custom_qty) {
    $result['#attached']['js'][] = drupal_get_path('module', 'commerce_express_checkout') . '/commerce_express_checkout.custom_qty.js';
  }

  return $result;
}

function commerce_express_checkout_commerce_checkout_pane_info_alter(&$panes) {
  if (arg(0) == 'checkout' && is_numeric(arg(1))) {
    $order = commerce_order_load(arg(1));

    if (array_key_exists('type', $order->data) && $order->data['type'] == 'commerce_express_checkout_order') {
      $panes['checkout_review']['page'] = 'disabled';
      $panes['commerce_payment']['page'] = 'checkout';
    }
  }
}

/**
 * Creates an order containing $qty of $product_id and redirects to checkout.
 */
function commerce_express_checkout_create_order($product_id, $qty, $token) {

  if (_commerce_express_checkout_generate_token($product_id) == $token) {
    global $user;

    $product = commerce_product_load($product_id);

    $order = ($user->uid) ? commerce_order_new($user->uid, 'checkout_checkout') : commerce_cart_order_new();

    commerce_order_save($order);

    $line_item = commerce_product_line_item_new($product, $qty, $order->order_id);

    commerce_line_item_save($line_item);

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $order_wrapper->commerce_line_items[] = $line_item;

    $order->data['type'] = 'commerce_express_checkout_order';

    commerce_order_save($order);

    drupal_goto('checkout/' . $order->order_id);

    return "";
  }

   return "";
}

function commerce_express_checkout_generate_links($form, &$form_state) {

  $products = db_query("SELECT * FROM {commerce_product} WHERE status=1");

  $products_array = array();

  foreach ($products as $product) {
    $products_array[$product->product_id] = $product->title;
  }

  $form['product'] = array(
      '#type' => 'select',
      '#title' => t('Select Product'),
      '#options' => $products_array,
      '#required' => TRUE,
      '#default_value' => array_key_exists("commerce_express_checkout_selected", $_SESSION) ? $_SESSION['commerce_express_checkout_selected'] : NULL,
      '#description' => t('Select a Product and click Generate Code, then copy the code from below'),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Generate Code'),
  );

  $form['link'] = array(
      '#markup' => '<div style="width: 80%; border: 2px solid #CCCCCC; padding: 20px;"><p>' . (array_key_exists("commerce_express_checkout_link", $_SESSION) ? $_SESSION["commerce_express_checkout_link"] : "") . '</p>',
  );

  if (array_key_exists("commerce_express_checkout_link", $_SESSION)){
    unset($_SESSION["commerce_express_checkout_selected"]);
    unset($_SESSION["commerce_express_checkout_link"]);
  }

  return $form;
}

function commerce_express_checkout_generate_links_submit($form, &$form_state){
  $_SESSION["commerce_express_checkout_selected"] = $form_state['values']['product'];
  $_SESSION["commerce_express_checkout_link"] = commerce_express_checkout_generate_link($form_state['values']['product']);
}

/**
 * Generates a token based on a product ID, site private key and hash salt.
 */
function _commerce_express_checkout_generate_token($product_id) {
  $token = drupal_hmac_base64($product_id, drupal_get_private_key() . drupal_get_hash_salt());
  return $token;
}

/**
 * Generates an express checkout link for product.
 *
 * @param int $product_id
 *   Drupal Commerce product ID
 *
 * @param bool $custom_qty
 *   Add quantity changer thingie if true
 *
 * @return string
 *   Themed output of link.
 */
function _commerce_express_checkout_generate_link($product_id, $custom_qty) {
  $token = _commerce_express_checkout_generate_token($product_id);
  $path = 'commerce-express-checkout/' . $product_id . '/1/' . $token;

  $vars = array(
    'link' => l(t('Express Checkout'), $path, array('attributes' => array('id' => array('commerce_express_checkout_' . $product_id), 'class' => array('commerce_express_checkout')))),
    'product_id' => $product_id,
    'path' => $path,
    'custom_qty' => $custom_qty,
  );

  return theme('commerce_express_checkout', $vars);
}

/**
 * Implements hook_theme()
 */
function commerce_express_checkout_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_express_checkout' => array(
      'variables' => array(
        'link' => NULL,
        'product_id' => NULL,
        'path' => NULL,
        'custom_qty' => NULL,
      ),
      'template' => 'commerce_express_checkout',
    ),
  );
}

